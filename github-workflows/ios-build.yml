name: iOS Build and Deploy to TestFlight

# Para activar este workflow:
# 1. Renombrar este archivo a: .github/workflows/ios-build.yml
# 2. Configurar los secrets en GitHub:
#    - IOS_DISTRIBUTION_CERT_P12
#    - IOS_DISTRIBUTION_CERT_PASSWORD  
#    - IOS_PROVISIONING_PROFILE
#    - APP_STORE_CONNECT_API_KEY_ID
#    - APP_STORE_CONNECT_ISSUER_ID
#    - APP_STORE_CONNECT_API_KEY_CONTENT

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  build-ios:
    name: Build iOS App
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true
          
      - name: Get Flutter dependencies
        run: flutter pub get
        
      - name: Run Flutter analyzer
        run: flutter analyze
        continue-on-error: true
        
      - name: Run Flutter tests
        run: flutter test
        continue-on-error: true
        
      - name: Install CocoaPods
        run: |
          cd ios
          pod install
          
      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Import Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DISTRIBUTION_CERT_P12 }}
          p12-password: ${{ secrets.IOS_DISTRIBUTION_CERT_PASSWORD }}
          
      - name: Download Provisioning Profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo $PROVISIONING_PROFILE_BASE64 | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision
          
      - name: Build iOS App (IPA)
        run: |
          flutter build ipa --release \
            --export-options-plist=ios/ExportOptions.plist \
            --build-name=1.0.0 \
            --build-number=${{ github.run_number }}
            
      - name: Upload IPA as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-release-ipa
          path: build/ios/ipa/*.ipa
          retention-days: 14
          
      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: |
          # Create API key file
          mkdir -p ~/private_keys
          echo "$APP_STORE_CONNECT_API_KEY_CONTENT" > ~/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          
          # Upload to TestFlight
          xcrun altool --upload-app \
            --type ios \
            --file build/ios/ipa/*.ipa \
            --apiKey $APP_STORE_CONNECT_API_KEY_ID \
            --apiIssuer $APP_STORE_CONNECT_ISSUER_ID
            
      - name: Notify Success
        if: success()
        run: echo "✅ iOS build uploaded to TestFlight successfully!"
        
      - name: Notify Failure
        if: failure()
        run: echo "❌ iOS build failed. Check the logs for details."
